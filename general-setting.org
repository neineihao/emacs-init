#+TITLE:General setting for Emacs
* Default Setting
** Turn off tool bar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC
** Turn off scroll bar
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC
** Windows Moving
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-S") 'windmove-up)
     (global-set-key (kbd "M-X") 'windmove-down)
     (global-set-key (kbd "M-C") 'windmove-right)
     (global-set-key (kbd "M-Z") 'windmove-left)    
   #+END_SRC
** Show line number
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** Shortcut for init file
   #+BEGIN_SRC emacs-lisp
     (defun open-my-init-file()
       (interactive)
       (find-file "~/.emacs.d/general-setting.org"))
     (global-set-key (kbd "<f2>") 'open-my-init-file)
   #+END_SRC
** Turn off the defacult screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
   #+END_SRC
** Set cursor type
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type 'bar)
   #+END_SRC
** Disable backup file
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC
** Coding block in org mode
   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (setq org-src-fontify-natively t)
   #+END_SRC
** Recent file
   #+BEGIN_SRC emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
   #+END_SRC
** Delete selection
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode t)
   #+END_SRC
** Full Screen
   #+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist (quote ((fullscreen . maximized))))
   #+END_SRC
** Parenthesis show
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
     (show-paren-mode t)
   #+END_SRC
** Line highlight
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC
** Turn off the ring bell
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
** yes or no to y/n
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Save all files in buffer
   #+BEGIN_SRC emacs-lisp
     (defun save-all () (interactive) (save-some-buffers t))
     (global-set-key (kbd "<f5>") 'save-all)
   #+END_SRC
** Ido mode
   #+BEGIN_SRC emacs-lisp
     (setq indo-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** Backward kill word
   #+BEGIN_SRC emacs-lisp
;;     (global-set-key (kbd "C-w") 'backward-kill-word)
   #+END_SRC
** Comment line
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-;") 'comment-line)
   #+END_SRC
** Org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Indent the region or buffer
   #+BEGIN_SRC emacs-lisp
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))

     (defun indent-region-or-buffer()
       (interactive)
       (save-excursion
	 (if (region-active-p)
	     (progn
	       (indent-region (region-beginning) (region-end))
	       (message "Indent selected region."))
	   (progn
	     (indent-buffer)
	     (message "Indent buffer.")))))

     (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
   #+END_SRC
** Comment region or line
   #+BEGIN_SRC emacs-lisp
     ;;; Code:
     (defun comment-region-or-line()
       (interactive)
       (save-excursion
	 (if (region-active-p)
	     (progn
	       (comment-region (region-beginning) (region-end))
	       (message "Comment selected region."))
	   (progn
	     (comment-line 1)
	     (message "Comment line.")))))

     (global-set-key (kbd "M-;") 'comment-region-or-line)

   #+END_SRC
** Setting for Dired mode
   #+BEGIN_SRC emacs-lisp
     (setq dired-recursive-deletes 'always)
     (setq dired-recursive-copies 'always)
     (put 'dired-find-alternate-file 'disabled nil)
     (require 'dired-x)
     (with-eval-after-load 'dired
	 (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

   #+END_SRC
** Occur mode
   #+BEGIN_SRC emacs-lisp
     (defun occur-dwim ()
       "Call `occur' with a sane default."
       (interactive)
       (push (if (region-active-p)
		 (buffer-substring-no-properties
		  (region-beginning)
		  (region-end))
	       (let ((sym (thing-at-point 'symbol)))
		 (when (stringp sym)
		   (regexp-quote sym))))
	     regexp-history)
       (call-interactively 'occur))
     (global-set-key (kbd "M-s o") 'occur-dwim)

   #+END_SRC
** Redo
   #+BEGIN_SRC emacs-lisp
     (load "~/.emacs.d/redo+.el")
     (require 'redo+)
     (global-set-key (kbd "C-M-/") 'redo)
   #+END_SRC
** Restart emacs
   #+BEGIN_SRC emacs-lisp
     (defun launch-separate-emacs-in-terminal ()
       (suspend-emacs "fg ; emacs -nw"))

     (defun launch-separate-emacs-under-x ()
       (call-process "sh" nil nil nil "-c" "emacs &"))

     (defun restart-emacs ()
       (interactive)
       ;; We need the new emacs to be spawned after all kill-emacs-hooks
       ;; have been processed and there is nothing interesting left
       (let ((kill-emacs-hook (append kill-emacs-hook (list (if (display-graphic-p)
								#'launch-separate-emacs-under-x
							      #'launch-separate-emacs-in-terminal)))))
	 (save-buffers-kill-emacs)))
   #+END_SRC
* Package
** Company mode
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config (add-hook 'after-init-hook 'global-company-mode))

     (require 'company)

     (add-hook 'after-init-hook 'global-company-mode)

     ;; Don't enable company-mode in below major modes, OPTIONAL
     (setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))

     ;; "text-mode" is a major mode for editing files of text in a human language"
     ;; most major modes for non-programmers inherit from text-mode
     (defun text-mode-hook-setup ()
       ;; make `company-backends' local is critcal
       ;; or else, you will have completion in every major mode, that's very annoying!
       (make-local-variable 'company-backends)

       ;; company-ispell is the plugin to complete words
       (add-to-list 'company-backends 'company-ispell)

       ;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
       ;;  but I prefer hard code the dictionary path. That's more portable.
       (setq company-ispell-dictionary (file-truename "~/.emacs.d/misc/english-words.txt")))

     (add-hook 'text-mode-hook 'text-mode-hook-setup)

     (defun toggle-company-ispell ()
       (interactive)
       (cond
        ((memq 'company-ispell company-backends)
         (setq company-backends (delete 'company-ispell company-backends))
         (message "company-ispell disabled"))
        (t
         (add-to-list 'company-backends 'company-ispell)
         (message "company-ispell enabled!"))))
   #+END_SRC
** Hungry delete
   #+BEGIN_SRC emacs-lisp
     (use-package hungry-delete
       :ensure t
       :init (global-hungry-delete-mode t)
       :config (require 'hungry-delete))

   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :init (smartparens-global-mode t)
       :config (require 'smartparens-config))
   #+END_SRC
** AVY mode
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("M-g w" . avy-goto-char)
	      ("M-g l" . avy-goto-line)))
   #+END_SRC
** Ace Window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
	 ))
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :config
       (progn
	 (add-to-list 'load-path "/some/path/neotree")
	 (require 'neotree)
	 ;;(global-set-key [f8] 'neotree-toggle)
	 ))

     ;;(add-hook 'C++-mode-hook
     ;;	  (lambda nil (save-excursion (neotree-show))))

     (defun neotree-project-dir-toggle ()
       "Open NeoTree using the project root, using find-file-in-project,
	  or the current buffer directory."
       (interactive)
       (let ((project-dir
	      (ignore-errors
		     ;;; Pick one: projectile or find-file-in-project
					     ; (projectile-project-root)
		(ffip-project-root)
		))
	     (file-name (buffer-file-name))
	     (neo-smart-open t))
	 (if (and (fboundp 'neo-global--window-exists-p)
		  (neo-global--window-exists-p))
	     (neotree-hide)
	   (progn
	     (neotree-show)
	     (if project-dir
		 (neotree-dir project-dir))
	     (if file-name
		 (neotree-find file-name))))))

     (define-key global-map (kbd "<f8>") 'neotree-project-dir-toggle)
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config 
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+END_SRC
** iEdit
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)
     ; if you're windened, narrow to the region, if you're narrowed, widen
     ; bound to C-x n
     (defun narrow-or-widen-dwim (p)
     "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
     Intelligently means: region, org-src-block, org-subtree, or defun,
     whichever applies first.
     Narrowing to org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer is already
     narrowed."
     (interactive "P")
     (declare (interactive-only))
     (cond ((and (buffer-narrowed-p) (not p)) (widen))
     ((region-active-p)
     (narrow-to-region (region-beginning) (region-end)))
     ((derived-mode-p 'org-mode)
     ;; `org-edit-src-code' is not a real narrowing command.
     ;; Remove this first conditional if you don't want it.
     (cond ((ignore-errors (org-edit-src-code))
     (delete-other-windows))
     ((org-at-block-p)
     (org-narrow-to-block))
     (t (org-narrow-to-subtree))))
     (t (narrow-to-defun))))

     ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing keymap, that's
     ;; how much I like this command. Only copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :init (yas-global-mode 1)
       :config
       (progn
	 (setq yas-snippet-dirs
	   '("~/.emacs.d/snippets"                 ;; local snippets
	     "~/Dropbox/snippets"         ;; snippets from Dropbox
	     ))))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init
       (global-flycheck-mode t))
   #+END_SRC
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode t))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
    ;; (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC
** popwin
   #+BEGIN_SRC emacs-lisp
     (use-package popwin
       :ensure t
       :config (require 'popwin))
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t)
   #+END_SRC
* Theme
** Monokai
   #+Begin_SRC emacs-lisp
    (use-package monokai-theme
	   :ensure t)    
   #+END_SRC
** Nyan Mode
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode
       :ensure t
       :config
       (progn
	 (require 'nyan-mode)
	 (setq-default nyan-wavy-trail t)
	 (nyan-mode)
	 (nyan-start-animation)
	 ))
   #+END_SRC
* Web Development
** dos-eol
   #+BEGIN_SRC emacs-lisp
     (defun hidden-dos-eol ()
       "Do not show ^M in files containing mixed UNIX and DOS line endings."
       (interactive)
       (unless buffer-display-table
	 (setq buffer-display-table (make-display-table)))
       (aset buffer-display-table ?\^M []))

     (defun remove-dos-eol ()
       "Replace DOS eolns CR LF with Unix eolns CR"
       (interactive)
       (goto-char (point-min))
       (while (search-forward "\r" nil t) (replace-match "")))
   #+END_SRC
** Web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :config
       (progn
	 (setq auto-mode-alist
	       (append
		'(("\\.js\\'" . js2-mode))
		'(("\\.html\\'" . web-mode))
		auto-mode-alist))))
   #+END_SRC
** Four space or two space
   #+BEGIN_SRC emacs-lisp
     (defun my-toggle-web-indent ()
       (interactive)
       ;; web development
       (if (or (eq major-mode 'js-mode) (eq major-mode 'js2-mode))
	   (progn
	     (setq js-indent-level (if (= js-indent-level 2) 4 2))
	     (setq js2-basic-offset (if (= js2-basic-offset 2) 4 2))))

       (if (eq major-mode 'web-mode)
	   (progn (setq web-mode-markup-indent-offset (if (= web-mode-markup-indent-offset 2) 4 2))
		  (setq web-mode-css-indent-offset (if (= web-mode-css-indent-offset 2) 4 2))
		  (setq web-mode-code-indent-offset (if (= web-mode-code-indent-offset 2) 4 2))))
       (if (eq major-mode 'css-mode)
	   (setq css-indent-offset (if (= css-indent-offset 2) 4 2)))

       (setq indent-tabs-mode nil))

     (global-set-key (kbd "C-c t i") 'my-toggle-web-indent)
   #+END_SRC
** JS2
   #+BEGIN_SRC emacs-lisp
     (use-package js2-refactor
       :ensure t
       :config
       (progn
	 (add-hook 'js2-mode-hook #'js2-refactor-mode)
	 (js2r-add-keybindings-with-prefix "C-c C-m")))
   #+END_SRC

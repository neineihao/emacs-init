#+TITLE:General setting for Emacs
* Default Setting
** Turn off tool bar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC
** Turn off scroll bar
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC
** Show line number
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC
** Turn off the defacult screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
   #+END_SRC
** Shortcut for init file
   #+BEGIN_SRC emacs-lisp
     (defun open-my-init-file()
       (interactive)
       (find-file "~/.emacs.d/macos-config.org"))
     (global-set-key (kbd "<f2>") 'open-my-init-file)
   #+END_SRC
** Set cursor type
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type 'bar)
   #+END_SRC
** Disable backup file
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC
** Coding block in org mode
   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (setq org-src-fontify-natively t)
   #+END_SRC
** Recent file
   #+BEGIN_SRC emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
   #+END_SRC
** Delete selection
   #+BEGIN_SRC emacs-lisp
     (delete-selection-mode t)
   #+END_SRC
** Full Screen
   #+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist (quote ((fullscreen . maximized))))
   #+END_SRC
** Parenthesis show
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
     (show-paren-mode t)
   #+END_SRC
** Line highlight
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode t)
   #+END_SRC
** Turn off the ring bell
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
** yes or no to y/n
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Save all files in buffer
   #+BEGIN_SRC emacs-lisp
     (defun save-all () (interactive) (save-some-buffers t))
     (global-set-key (kbd "<f5>") 'save-all)
   #+END_SRC
** Ido mode
   #+BEGIN_SRC emacs-lisp
     (setq indo-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** Backward kill word
   #+BEGIN_SRC emacs-lisp
;;     (global-set-key (kbd "C-w") 'backward-kill-word)
   #+END_SRC
** Comment line
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-;") 'comment-line)
   #+END_SRC
** Org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Indent the region or buffer
   #+BEGIN_SRC emacs-lisp
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))

     (defun indent-region-or-buffer()
       (interactive)
       (save-excursion
	 (if (region-active-p)
	     (progn
	       (indent-region (region-beginning) (region-end))
	       (message "Indent selected region."))
	   (progn
	     (indent-buffer)
	     (message "Indent buffer.")))))

     (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
   #+END_SRC
** Comment region or line
   #+BEGIN_SRC emacs-lisp

     ;;; Code:
     (defun comment-region-or-line()
       (interactive)
       (save-excursion
	 (if (region-active-p)
	     (progn
	       (comment-region (region-beginning) (region-end))
	       (message "Comment selected region."))
	   (progn
	     (comment-line 1)
	     (message "Comment line.")))))

     (global-set-key (kbd "M-;") 'comment-region-or-line)

   #+END_SRC
* Package
** Company mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
     (require 'company)
     (add-hook 'after-init-hook 'global-company-mode)
     ;; Don't enable company-mode in below major modes, OPTIONAL
     (setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))
     ;; "text-mode" is a major mode for editing files of text in a human language"
     ;; most major modes for non-programmers inherit from text-mode
     (defun text-mode-hook-setup ()
       ;; make `company-backends' local is critcal
       ;; or else, you will have completion in every major mode, that's very annoying!
       (make-local-variable 'company-backends)
       ;; company-ispell is the plugin to complete words
       (add-to-list 'company-backends 'company-ispell)
       ;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
       ;;  but I prefer hard code the dictionary path. That's more portable.
       (setq company-ispell-dictionary (file-truename "~/.emacs.d/misc/english-words.txt")))

     (add-hook 'text-mode-hook 'text-mode-hook-setup)

     (defun toggle-company-ispell ()
       (interactive)
       (cond
	((memq 'company-ispell company-backends)
	 (setq company-backends (delete 'company-ispell company-backends))
	 (message "company-ispell disabled"))
	(t
	 (add-to-list 'company-backends 'company-ispell)
	 (message "company-ispell enabled!"))))
   #+END_SRC
** Swiper setting
   #+BEGIN_SRC emacs-lisp
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     ;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     ;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     ;;(global-set-key (kbd "C-c k") 'counsel-ag)
     ;;(global-set-key (kbd "C-x l") 'counsel-locate)
     ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   #+END_SRC
** Hungry delete
   #+BEGIN_SRC emacs-lisp
     (require 'hungry-delete)
     (global-hungry-delete-mode)
   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (require 'smartparens-config)
     (smartparens-global-mode t)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     (which-key-mode t)
   #+END_SRC
** AVY mode
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-s") 'avy-goto-line)
   (global-set-key (kbd "M-g f") 'avy-goto-word-1)
   #+END_SRC
** Ace Window
   #+BEGIN_SRC emacs-lisp
     (global-set-key [remap other-window] 'ace-window)
     (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "/some/path/neotree")
     (require 'neotree)

     (defun neotree-project-dir-toggle ()
	    "Open NeoTree using the project root, using find-file-in-project,
	  or the current buffer directory."
	    (interactive)
     (let ((project-dir
	    (ignore-errors
		     ;;; Pick one: projectile or find-file-in-project
		     ; (projectile-project-root)
		     (ffip-project-root)
		     ))
		  (file-name (buffer-file-name))
		  (neo-smart-open t))
	      (if (and (fboundp 'neo-global--window-exists-p)
		       (neo-global--window-exists-p))
		  (neotree-hide)
		(progn
		  (neotree-show)
		  (if project-dir
		      (neotree-dir project-dir))
		  (if file-name
		      (neotree-find file-name))))))
     (define-key global-map (kbd "<f8>") 'neotree-project-dir-toggle)
   #+END_SRC
** Expand region
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-=") 'er/expand-region)
   #+END_SRC
** iEdit
   #+BEGIN_SRC emacs-lisp
     (require 'iedit)
     ; if you're windened, narrow to the region, if you're narrowed, widen
     ; bound to C-x n
     (defun narrow-or-widen-dwim (p)
     "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
     Intelligently means: region, org-src-block, org-subtree, or defun,
     whichever applies first.
     Narrowing to org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer is already
     narrowed."
     (interactive "P")
     (declare (interactive-only))
     (cond ((and (buffer-narrowed-p) (not p)) (widen))
     ((region-active-p)
     (narrow-to-region (region-beginning) (region-end)))
     ((derived-mode-p 'org-mode)
     ;; `org-edit-src-code' is not a real narrowing command.
     ;; Remove this first conditional if you don't want it.
     (cond ((ignore-errors (org-edit-src-code))
     (delete-other-windows))
     ((org-at-block-p)
     (org-narrow-to-block))
     (t (org-narrow-to-subtree))))
     (t (narrow-to-defun))))

     ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing keymap, that's
     ;; how much I like this command. Only copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (require 'yasnippet)
     (setq yas-snippet-dirs
	'("~/.emacs.d/snippets"                 ;; local snippets
	  "~/.emacs.d/Dropbox/snippets"         ;; snippets from Dropbox
	  ))
     (yas-global-mode 1)
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (global-flycheck-mode t)
   #+END_SRC
** Undo Tree
   #+BEGIN_SRC emacs-lisp
     (require 'undo-tree)
     (global-undo-tree-mode)
   #+END_SRC
** Magit
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x g") 'magit-status)
  #+END_SRC
** popwin
   #+BEGIN_SRC emacs-lisp
     (require 'popwin)
     (popwin-mode t)
   #+END_SRC
* Theme
** Monokai
  #+Begin_SRC emacs-lisp
    (load-theme 'monokai t)
  #+END_SRC
** Nyan Mode
   #+BEGIN_SRC emacs-lisp
     (require 'nyan-mode)
     (setq-default nyan-wavy-trail t)
     (nyan-mode)
     (nyan-start-animation)
   #+END_SRC
